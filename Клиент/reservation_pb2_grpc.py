# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import reservation_pb2 as reservation__pb2


class ReservationServiceStub(object):
    """Сервис бронирования
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/reservation.ReservationService/Ping',
                request_serializer=reservation__pb2.PingRequest.SerializeToString,
                response_deserializer=reservation__pb2.PingResponse.FromString,
                )
        self.ReserveSeat = channel.unary_unary(
                '/reservation.ReservationService/ReserveSeat',
                request_serializer=reservation__pb2.ReservationRequest.SerializeToString,
                response_deserializer=reservation__pb2.ReservationResponse.FromString,
                )
        self.GetSeatStatus = channel.unary_stream(
                '/reservation.ReservationService/GetSeatStatus',
                request_serializer=reservation__pb2.SeatListRequest.SerializeToString,
                response_deserializer=reservation__pb2.SeatStatus.FromString,
                )
        self.UpdateStatus = channel.unary_unary(
                '/reservation.ReservationService/UpdateStatus',
                request_serializer=reservation__pb2.ReservationRequest.SerializeToString,
                response_deserializer=reservation__pb2.ReservationResponse.FromString,
                )


class ReservationServiceServicer(object):
    """Сервис бронирования
    """

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReserveSeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSeatStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReservationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=reservation__pb2.PingRequest.FromString,
                    response_serializer=reservation__pb2.PingResponse.SerializeToString,
            ),
            'ReserveSeat': grpc.unary_unary_rpc_method_handler(
                    servicer.ReserveSeat,
                    request_deserializer=reservation__pb2.ReservationRequest.FromString,
                    response_serializer=reservation__pb2.ReservationResponse.SerializeToString,
            ),
            'GetSeatStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSeatStatus,
                    request_deserializer=reservation__pb2.SeatListRequest.FromString,
                    response_serializer=reservation__pb2.SeatStatus.SerializeToString,
            ),
            'UpdateStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateStatus,
                    request_deserializer=reservation__pb2.ReservationRequest.FromString,
                    response_serializer=reservation__pb2.ReservationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'reservation.ReservationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReservationService(object):
    """Сервис бронирования
    """

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reservation.ReservationService/Ping',
            reservation__pb2.PingRequest.SerializeToString,
            reservation__pb2.PingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReserveSeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reservation.ReservationService/ReserveSeat',
            reservation__pb2.ReservationRequest.SerializeToString,
            reservation__pb2.ReservationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSeatStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/reservation.ReservationService/GetSeatStatus',
            reservation__pb2.SeatListRequest.SerializeToString,
            reservation__pb2.SeatStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reservation.ReservationService/UpdateStatus',
            reservation__pb2.ReservationRequest.SerializeToString,
            reservation__pb2.ReservationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
